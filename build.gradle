import com.liferay.portal.kernel.util.ReleaseInfo

apply from: "${gradle.lfrSdkDir}/versions.gradle"

buildscript {
	dependencies {
		classpath([group: "com.liferay.portal", name: "portal-service", version: "7.0.0-SNAPSHOT"])
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}
}

configure(allprojects) {
	configurations {
		all {
			resolutionStrategy.cacheChangingModulesFor 15, 'minutes'
		}
	}

	repositories {
		maven {
			url "http://cdn.repository.liferay.com/nexus/content/groups/public"
		}
	}

	File pluginDocrootDir = file("${projectDir}/docroot")
	File pluginSrcDir = file("${projectDir}/docroot/WEB-INF/src")

	if (!pluginSrcDir.exists()) {
		pluginDocrootDir = null

		pluginSrcDir = file("${projectDir}/src")

		if (!pluginSrcDir.exists()) {
			pluginSrcDir = null
		}
	}

	if (pluginDocrootDir) {
		ext.pluginDocrootDir = pluginDocrootDir
	}

	if (pluginSrcDir) {
		ext.pluginSrcDir = pluginSrcDir
	}
}

configure(
	allprojects.findAll {
		it.hasProperty("pluginSrcDir")
	}) {

	apply plugin: "war"

	Boolean osgiPlugin

	Closure exists
	Closure getBuildXmlProperty
	Closure getPluginsSrcDir
	Closure readConfigurations
	Closure setModuleProperties

	File pluginPackagePropertiesFile

	Node buildXmlNode
	Node ivyXmlNode

	Properties bndProperties
	Properties pluginPackageProperties

	String pluginPackaging

	task buildCss(type: JavaExec)
	task compile
	task initGradle

	buildCss {
		Closure setOutputs
		Closure setSassProperties

		File sassDocrootDir

		FileTree sassDocrootDirFileTree

		configurations {
			buildCssClasspath

			portalWeb
		}

		dependencies {
			buildCssClasspath(
				[group: "com.liferay", name: "com.liferay.ruby.gems", version: "1.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "portal-impl", version: "7.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "portal-service", version: "7.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "util-java", version: "7.0.0-SNAPSHOT"],
				[group: "com.thoughtworks.xstream", name: "xstream", version: "1.4.3"],
				[group: "commons-lang", name: "commons-lang", version: "2.6"],
				[group: "commons-configuration", name: "commons-configuration", version: "1.6"],
				[group: "javax.portlet", name: "portlet-api", version: "2.0"],
				[group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"],
				[group: "easyconf", name: "easyconf", version: "0.9.5", transitive: false],
				[group: "org.apache.ant", name: "ant", version: "1.8.2"],
				[group: "org.jruby", name: "jruby-complete", version: "1.6.5"],
				[group: "org.mozilla", name: "rhino", version: "1.7R4"],
				[group: "org.springframework", name: "spring-web", version: "3.2.10.RELEASE"],
				[group: "struts", name: "struts", version: "1.2.9"])

			portalWeb([group: "com.liferay.portal", name: "portal-web", version: "7.0.0-SNAPSHOT"])
		}

		doFirst {
			args = [
				"sass.dir=/",
				"sass.docroot.dir=${sassDocrootDir}",
				"sass.portal.common.dir=${rootDir}/tmp/portal-web/html/css/common"
			]

			classpath = configurations.buildCssClasspath

			if (!exists("${rootDir}/tmp/portal-web")) {
				copy {
					from(zipTree(configurations.portalWeb.singleFile)) {
						include "html/css/**/*"
						include "html/themes/**/*"
						include "WEB-INF/tld/**/*"
					}

					into "${rootDir}/tmp/portal-web"
				}
			}
		}

		main = "com.liferay.portal.tools.SassToCssBuilder"

		onlyIf {
			sassDocrootDirFileTree.getFiles()
		}

		setOutputs = {
			outputs.dir "${rootDir}/tmp"

			sassDocrootDirFileTree.each {
				outputs.dir "${it}/../.sass-cache"
			}
		}

		setSassProperties = {
			if (osgiPlugin) {
				sassDocrootDir = file("${projectDir}/src/META-INF/resources")
			}
			else {
				sassDocrootDir = file("${projectDir}/docroot")
			}

			sassDocrootDirFileTree = fileTree(dir: sassDocrootDir, include: "**/*.css")
		}

		setSassProperties()

		setOutputs()
	}

	clean {
		afterEvaluate {
			tasks.each {
				delete it.outputs
			}
		}

		Map projectCompileDependencies = gradle.compileDependencies.find {
			project.path == it.projectPath
		}

		if (projectCompileDependencies) {
			projectCompileDependencies["compile"].each {
				dependsOn "${it}:clean"
			}
		}
	}

	compile {
		dependsOn compileJava
	}

	compileJava {
		dependencies {
			afterEvaluate {
				String projectServiceJarFile = "${projectDir}/docroot/WEB-INF/lib/${project.name}-service.jar"

				if (exists(projectServiceJarFile)) {
					compile(files(projectServiceJarFile))
				}
			}

			Map projectCompileDependencies = gradle.compileDependencies.find {
				project.path == it.projectPath
			}

			if (projectCompileDependencies) {
				projectCompileDependencies["compile"].each {
					compile project(it)
				}
			}

			if (!project.name.endsWith("-layouttpl") && !project.name.equals("portal-compat-shared")) {
				compile project(":shared:portal-compat-shared")
			}

			providedCompile(
				[group: "biz.aQute.bnd", name: "biz.aQute.bnd", version: "2.4.1"],
				[group: "com.liferay.portal", name: "portal-service", version: "7.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "util-bridges", version: "7.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "util-java", version: "7.0.0-SNAPSHOT"],
				[group: "com.liferay.portal", name: "util-taglib", version: "7.0.0-SNAPSHOT"],
				[group: "commons-logging", name: "commons-logging", version: "1.1.1"],
				[group: "hsqldb", name: "hsqldb", version: "1.8.0.7"],
				[group: "javax.activation", name: "activation", version: "1.1"],
				[group: "javax.ccpp", name: "ccpp", version: "1.0"],
				[group: "javax.jms", name: "jms", version: "1.1"],
				[group: "javax.mail", name: "mail", version: "1.4"],
				[group: "javax.portlet", name: "portlet-api", version: "2.0"],
				[group: "javax.servlet", name: "javax.servlet-api", version: "3.0.1"],
				[group: "javax.servlet.jsp", name: "jsp-api", version: "2.1"],
				[group: "log4j", name: "log4j", version: "1.2.16"],
				[group: "mysql", name: "mysql-connector-java", version: "5.1.23"],
				[group: "net.sf", name: "jargs", version: "1.0"],
				[group: "net.sourceforge.jtds", name: "jtds", version: "1.2.6"],
				[group: "org.eclipse.persistence", name: "javax.persistence", version: "2.0.0"],
				[group: "postgresql", name: "postgresql", version: "9.2-1002.jdbc4"])
		}
	}

	exists = {
		String fileName ->

		File file = file(fileName)

		return file.exists()
	}

	getBuildXmlProperty = {
		String key, String defaultValue = "" ->

		String value = defaultValue

		Node buildXmlPropertyNode = buildXmlNode.property.find {
			it.@name == key
		}

		if (buildXmlPropertyNode) {
			value = buildXmlPropertyNode.@value
		}

		return value
	}

	initGradle << {
		Closure getBuildGradleDependencies
		Closure getBuildGradleDependenciesCompile
		Closure getBuildGradleDependenciesProvidedCompile
		Closure getBuildGradleDependenciesTestCompile
		Closure getIndent
		Closure wrapContents
		Closure wrapDependency
		Closure wrapProperty
		Closure wrapServiceJar
		Closure writeBuildGradleFile
		Closure writeDependencySettingsFile

		getBuildGradleDependencies = {
			List contents = []

			contents.addAll(getBuildGradleDependenciesCompile())
			contents.addAll(getBuildGradleDependenciesProvidedCompile())
			contents.addAll(getBuildGradleDependenciesTestCompile())

			return wrapContents(contents, 0, " {", "dependencies", "}")
		}

		getBuildGradleDependenciesCompile = {
			List contents = []

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					if ((it.@conf == null) || (it.@conf == "default")) {
						contents.addAll(wrapDependency(2, it.@org, it.@name, it.@rev))
					}
				}
			}

			String requiredDeploymentContexts = pluginPackageProperties["required-deployment-contexts"]

			if (requiredDeploymentContexts) {
				String[] requiredDeploymentContextsArray = requiredDeploymentContexts.split(",")

				requiredDeploymentContextsArray.each {
					String serviceJarFileName = "../../" + it.replaceFirst(".+-", "") + "s/${it}/docroot/WEB-INF/lib/${it}-service.jar"

					File serviceJarFile = new File("${projectDir}", serviceJarFileName)

					if (serviceJarFile.exists()) {
						contents.addAll(wrapServiceJar(2, serviceJarFileName))
					}
				}
			}

			return wrapContents(contents, 1, "(", "compile", ")")
		}

		getBuildGradleDependenciesProvidedCompile = {
			List contents = []

			String portalDependencyJars = pluginPackageProperties["portal-dependency-jars"]

			if (portalDependencyJars) {
				portalDependencyJars = portalDependencyJars.replaceAll("\\.jar", "")
				portalDependencyJars = portalDependencyJars.replaceAll("-\\w") {
					it[1].toUpperCase()
				}

				String[] portalDependencyJarsArray = portalDependencyJars.split(",");

				portalDependencyJarsArray.each {
					String portalDependencyJar ->

					Map portalDependencyJarMap = portalDependencies.get(portalDependencyJar)

					if (portalDependencyJarMap == null) {
						println("Portal dependency " + portalDependencyJar + " is not defined in versions.gradle")
					}
					else {
						contents.addAll(wrapDependency(2, portalDependencyJarMap["group"], portalDependencyJarMap["name"], portalDependencyJarMap["version"]))
					}
				}

			}

			return wrapContents(contents, 1, "(", "providedCompile", ")")
		}

		getBuildGradleDependenciesTestCompile = {
			List contents = []

			if (ivyXmlNode) {
				ivyXmlNode.dependencies.dependency.each {
					if (it.@conf =~ "test") {
						contents.addAll(wrapDependency(2, it.@org, it.@name, it.@rev))
					}
				}
			}

			return wrapContents(contents, 1, "(", "testCompile", ")")
		}

		getIndent = {
			String indent = ""

			it.times(
			{
				indent = indent + "\t"
			})

			return indent
		}

		wrapContents = {
			List contents, int indentCount, String leftClose, String name, String rightClose ->

			if (contents.isEmpty()) {
				return contents;
			}

			String indent = getIndent(indentCount)

			contents.add(0, indent + name + leftClose)

			String content = contents.last()

			if (content.endsWith(",")) {
				contents.pop()

				contents << content.substring(0, content.length() - 1)
			}

			contents << indent + rightClose

			return contents
		}

		wrapDependency = {
			int indentCount, String group, String name, String version ->

			return "${getIndent(indentCount)}[group: \"${group}\", name: \"${name}\", version: \"${version}\"],"
		}

		wrapProperty = {
			int indentCount, String name, String value = "" ->

			if (value) {
				return "${getIndent(indentCount)}${name} = \"${value}\""
			}

			return []
		}

		wrapServiceJar = {
			int indentCount, String serviceJarFileName ->

			return "${getIndent(indentCount)}files(\"${serviceJarFileName}\"),"
		}

		writeBuildGradleFile = {
			List contents = []

			contents.addAll(getBuildGradleDependencies())

			File buildGradleFile = new File("${projectDir}/build.gradle")

			contents.each {
				buildGradleFile << it + "\n"
			}
		}

		writeDependencySettingsFile = {
			File dependencySettingsFile = new File("${projectDir}/dependency-settings.gradle")

			String importShared = getBuildXmlProperty("import.shared")

			if (importShared) {
				List contents = []

				String[] importSharedArray = importShared.split(",")

				importSharedArray.each {
					contents << "includeTransitive \":shared:${it}\""
				}

				contents.each {
					dependencySettingsFile << it + "\n"
				}
			}
			else {
				dependencySettingsFile.delete()
			}
		}

		// build.gradle

		writeBuildGradleFile()

		// dependency-settings.gradle

		writeDependencySettingsFile()
	}

	readConfigurations = {

		// bnd.bnd

		bndProperties = new Properties()

		File bndPropertiesFile = new File("${projectDir}/bnd.bnd")

		if (bndPropertiesFile.exists()) {
			bndProperties.load(new FileInputStream(bndPropertiesFile))
		}

		// build.xml

		XmlParser xmlParser = new XmlParser()

		xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)

		File buildXmlFile = new File("${projectDir}/build.xml")

		if (buildXmlFile.exists()) {
			buildXmlNode = xmlParser.parse(buildXmlFile)
		}

		// ivy.xml

		File ivyXmlFile = new File("${projectDir}/ivy.xml")

		if (ivyXmlFile.exists()) {
			ivyXmlNode = xmlParser.parse(ivyXmlFile)
		}

		// liferay-plugin-package.properties

		pluginPackageProperties = new Properties()

		pluginPackagePropertiesFile = new File("${projectDir}/docroot/WEB-INF/liferay-plugin-package.properties")

		if (pluginPackagePropertiesFile.exists()) {
			pluginPackageProperties.load(new FileInputStream(pluginPackagePropertiesFile))
		}
	}

	setModuleProperties = {

		// osgiPlugin

		File bndPropertiesFile = new File("${projectDir}/bnd.bnd")

		osgiPlugin = bndPropertiesFile.exists()

		// pluginPackaging

		pluginPackaging = "war"

		if ((project.parent.name == "shared") || osgiPlugin) {
			pluginPackaging = "jar"
		}

		// version

		String moduleFullVersion = pluginPackageProperties["module-full-version"]

		if (moduleFullVersion != null) {
			version = moduleFullVersion
		}
		else {
			String bundleVersion = bndProperties["Bundle-Version"]

			if (bundleVersion != null) {
				version = bundleVersion
			}
			else {
				String moduleIncrementalVersion = pluginPackageProperties["module-incremental-version"]

				if (moduleIncrementalVersion == null) {
					moduleIncrementalVersion = getBuildXmlProperty("plugin.version")
				}

				version = getBuildXmlProperty("plugin.full.version", ReleaseInfo.getVersion() + "." + moduleIncrementalVersion)
			}
		}
	}

	sourceSets {
		main {
			java {
				srcDir pluginSrcDir
			}
			resources {
				srcDir pluginSrcDir
			}
		}
	}

	war {
		dependsOn buildCss

		destinationDir = file("${rootDir}/dist")

		duplicatesStrategy "exclude"

		exclude "_diffs.*", "_diffs/**", "WEB-INF/lib/*"

		outputs.file archivePath
	}

	webAppDirName = "docroot"

	readConfigurations()

	setModuleProperties()
}